import { Bytes, Gadgets, UInt32 } from 'o1js';
import { decompressByteArray } from './utils.js';
import { Bigint2048 } from './rsa.js';
import { bufferToHex } from '@zk-email/helpers';

export { getQRData, TEST_DATA, TEST_DATA_2 };

const TEST_DATA =
  '8259163575998395410294216884136380469956685892150052488437065451544537272028823381012058331104900016170949862194992078675406411614673500428635982291062028490923003780630984433423301235105417377787131661931984964599727049255285879318792495236619560961528175330528230923044174467379560397653507051470100248395988491800303621193017585564341319296489036716964773497652480922601816247855475394255072055155630865556422666204858735313430441358989197942359085778977252174914218750831324262405073486188565379661087624387219845602810004409858067060582723830310306954192817345000453273623216177755588322887355541803994258569827849151852254798713294190907648230081077510592816508733759309449554841585969816906585446495429295879085493920989281432124264686964836843412063229868917416620953791606506977061635857869230322961966933040081525837759953018919032951374647284949205876501534604609019655215562471603371161946541957137254612227929914099003888563475886540925722627409182118438133540745135873329891527671405288082042105248606397547696373988012429641765957373215164223914638446054352114848994560273925881966532950058515181388759591132298529623987123194227812330918793321242727635507097775073470913531111624493576370385944481779207499154345692800114586514930018253620629510671404966362557857641999589084996038042041566831142437243583312354405809351126154203741507594162846336352179343954609499386129314707436439498170844738212884179575970184067773906023308700304595766504002059225628845131658391808799061443662643244237433587394532910535053813919941235917069445490288535690770254964055050593379778806503841922391399545982769046149777275410414936802378789310715386469101351083935892919710110707167748324213165552014082126981342105688852994389004329229607011870745132085215561769894535198146559591966109398235088570991674596662725913989312687633451215056181618710951495328959829445355475946382007067174484187843829682632075742981527603170017383558567515525142187900818201598762722436016733654029911649550767959827096893303631543278516100843293421762867984506025935441477253344987175034417916079625625371854046567321295833019522935272303724497663116543666998220335640687972062287455715754417604421981525656917538633268735987248122223688953567669389081610408785753661463406540493356023533353414845665187659296301626231138335599426042956724260221272505774023358411257317356159623167122090889680494391699098612891443839591040158364788967761812547722827975134074249498746600141474162623701225599279053137171665029207049665126886560795303043957258835332398217358504670108540440086553112969204911544457383791164248286490428962205833992719109104066885727003793530534239190322145789868094191824916635003885589340787668337395036427004773582592606136970224829885297327946705251124207201157878059391302841686982381058544860043878906081086431706218579038805094181604734876076823217950098303441193151451328000264195608403604158930298446358926216003325046476113401255186582872417002832207916555599681630457718321743339538760995883798622573729834417735834210649314285763784726287210633344224738479199260435876897373634088311958610480853339605575937005219222939598641467868545589588057047581729376964';
const TEST_DATA_2 =
  '695108307045527203055615552134508634869313570553666100477202607062757643007501517707914916947062730118717087611660060437844161802538907694979618377671666621867791487638790636373464994134315734696742126435596924001825683100883371480369570501604787690986228015905314201200550128314161805391443376955770357541999781304172664043491767284630961452708479807324459031373390086766026424293076110690254914906158579899076965475084976466902094150747541039557971112615231083695040828490641573340200553510163317532258507357415982462223819973680228805305476779828401817268944708419114646262551435858171213470890833104019241443970145890746211784743258868793847230502307810125315848652562473145409334800891862199529531750416482976121624639122701453919369311787772737470058395084047404058486300551616711802185309680077777092230227558959181061074660298324479171992937190834929377461546881528032166458467694938876998037752208249425845443796137096263836665677749281448668991632436853562245717248814394439563856275738472262715364751506054681270121795516685962466116530469928182192421431720527663400919255502454466992045635936466572728594863044671760037420840550384224619227231740171311303261191973693264225425424488156991288734304286990786947338768403251699618555992447430210951639932840454315194221949885400570945317709439880688625299416196563876389062235166023141922185150540491195573798043712464267606105346630104209227955424663531857375581678035170724890175887286342300590167277648427816093066111328188884991692539844156266411531536743288552784264671038738720817845893964761234922618885051752792061274036763576416419617548836998336212693363770768668809834153042537830573696247727217638612659357961421258097144125858693754160242709315351156048795594742904722212991967262538622580041298272219870940972510151963713319990221739760734015892615846051295060755617823383156666664331205715355279547836160340445430923096092969338859711053345624450203825780796950470200575034062557690197941737413718052775025743360425956741948806189820117836172423165507195817382096429757651774759500681340826961982073846825751609986976937008646447599877018081884685398276417914083624961553118881523886402060433670312723677050257528634346974165578432125714846236256516186252251075400277287507294406277344891750724820946254712727354898463786249479324037031487559614121102817355815225764445249211810613948351631969499366940115305478077910773101947521237397679544735391938498017925543493156495032003984473785636678491342421092654588291019361187845868652483943934521887828699297572710399491797775544299099192020721173381685773260673679062098216902845514463748211135504208731854638268464746734110840796912524709701601698608959766639361041099733428100760344327687240692501800212481794690710729836540017003327262083529546519782685845513664348681478652061243064477803815454807640356482944680534135200903653010236024141326909400338094755076773364830809574426148125222631971419453994157500137651081343878173021966188607340565822223858133207448031613017981146468638126763656673463737940362583169133984453863285521029787888636041774470080903371229297899888380699277465096982109186263495828124863029659817019267988844516390383511609435444521556194424555197555203196680894879468791950284191886842609020889461750069653256857480644822769637933491206172204668897604278465824577514863629972675276354172866422382710843294136828226685620921800451';

/**
 * Generates and prepares input data for circuits from hard-coded Aadhaar QR data.
 *
 * This function performs the following steps:
 * 1. Loads a hard-coded public key and QR data (hex and numeric string formats).
 * 2. Converts the QR data string to a BigInt, then to bytes, and decompresses it.
 * 3. Separates the decompressed data into the signature and signed data.
 * 4. Converts both the public key and the signature to `Bigint2048` types for cryptographic use.
 * 5. Pads the signed data using SHA-256 padding, to be compatible with hashing inside circuits.
 * 6. Retrieves the initial SHA-256 state needed for circuit computations.
 *
 * @returns {Object} An object containing:
 * - `paddedData`: The signed data after SHA-256 padding, as a byte array in Bytes type.
 * - `initialValue` : The initial SHA-256 state used for hashing returned as an array of UInt32 type.
 * - `signatureBigint`: The digital signature extracted from the QR data, as Bigint2048 type.
 * - `publicKeyBigint`: The Aadhaar public key, as Bigint2048 type.
 *
 * @remarks
 * - The QR data and public key are hard-coded and can typically be obtained from certificates.
 * - This is designed to work with Aadhaar QR code V2 data formats.
 * - The function assumes the last 256 bytes of the decompressed QR data represent the digital signature.
 */
function getQRData(testQRData: string) {
  // Hard-coded public key and QR data that can be obtained from certiifcates.
  const publicKeyHex =
    '95e81f7506595cc262addcfddd35d804055b2adf46dc719c56b58eee199995efa1a3254710620ac7801e976f44e3be454db0f190e3f7d4e3598972117344de52fcf7826f849488a959a7b3d21eb6dd03451662ea883eeeefde889a1499b9a47f9504c5f096c262b96d23d19750332d9e97eb6141d261de97994d4c4163ca9cbe3e077221b44253dcf81609428b68351ee3e9b60d2b351fdaa6ee8c28a845239f97de7cc0fe5d144e474813fb43ec583f81b4ee328c22167334898d210ba017a26ec68940f05df22bd9cc86bbc3a4354392372d566167769b735ba12ca3580f919c1bd8ba70c4c2ab0acf2b09bc2fae981f3c0295a6e1e9f248f50073094ffaf1';

  // Convert QR data to bigintx
  const QRData = BigInt(testQRData);

  // Parse qr data and convert it to decompressed bytes step by step (using Aadhaar SDK)
  // Convert QR data bigint to byte array and decompress it
  const qrDataBytes = Bytes.fromHex(QRData.toString(16)).toBytes();
  const decompressedData = decompressByteArray(qrDataBytes);

  // Split signature and signed data. Signature in aadhaar QR data is the last 256 bytes.
  const signatureBytes = decompressedData.slice(
    decompressedData.length - 256,
    decompressedData.length
  );

  // Slice the data for getting the sliced data
  const signedData = decompressedData.slice(0, decompressedData.length - 256);

  // Convert pubkey from byte array to BigInt type.
  const publicKeyBigint = Bigint2048.from(BigInt('0x' + publicKeyHex));

  // Convert signature from byte array to BigInt type.
  const signatureBigint = Bigint2048.from(
    BigInt('0x' + bufferToHex(Buffer.from(signatureBytes)).toString())
  );

  // Pad the blocks for SHA256 processes. Padding of the internla SHA256 function will be used here.
  const paddedBlocks = Gadgets.SHA2.padding(256, signedData);

  // Convert padded Data from blocks to bytes.
  let paddedData = Bytes.from(
    paddedBlocks
      .flat()
      .map((word) => word.toBytesBE())
      .flat()
  );

  return {
    paddedData,
    signatureBigint,
    publicKeyBigint,
    signedData,
  };
}
